{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":13069788,"sourceType":"datasetVersion","datasetId":8277243},{"sourceId":13069861,"sourceType":"datasetVersion","datasetId":8277288}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install google-cloud-vision","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-16T08:06:50.965376Z","iopub.execute_input":"2025-09-16T08:06:50.965727Z","iopub.status.idle":"2025-09-16T08:06:55.955894Z","shell.execute_reply.started":"2025-09-16T08:06:50.965704Z","shell.execute_reply":"2025-09-16T08:06:55.954027Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: google-cloud-vision in /usr/local/lib/python3.11/dist-packages (3.10.2)\nRequirement already satisfied: google-api-core!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0,>=1.34.1 in /usr/local/lib/python3.11/dist-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0,>=1.34.1->google-cloud-vision) (1.34.1)\nRequirement already satisfied: google-auth!=2.24.0,!=2.25.0,<3.0.0,>=2.14.1 in /usr/local/lib/python3.11/dist-packages (from google-cloud-vision) (2.40.3)\nRequirement already satisfied: proto-plus<2.0.0,>=1.22.3 in /usr/local/lib/python3.11/dist-packages (from google-cloud-vision) (1.26.1)\nRequirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<7.0.0,>=3.20.2 in /usr/local/lib/python3.11/dist-packages (from google-cloud-vision) (3.20.3)\nRequirement already satisfied: googleapis-common-protos<2.0dev,>=1.56.2 in /usr/local/lib/python3.11/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0,>=1.34.1->google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0,>=1.34.1->google-cloud-vision) (1.70.0)\nRequirement already satisfied: requests<3.0.0dev,>=2.18.0 in /usr/local/lib/python3.11/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0,>=1.34.1->google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0,>=1.34.1->google-cloud-vision) (2.32.4)\nRequirement already satisfied: grpcio<2.0dev,>=1.33.2 in /usr/local/lib/python3.11/dist-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0,>=1.34.1->google-cloud-vision) (1.73.1)\nRequirement already satisfied: grpcio-status<2.0dev,>=1.33.2 in /usr/local/lib/python3.11/dist-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0,>=1.34.1->google-cloud-vision) (1.49.0rc1)\nRequirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from google-auth!=2.24.0,!=2.25.0,<3.0.0,>=2.14.1->google-cloud-vision) (5.5.2)\nRequirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from google-auth!=2.24.0,!=2.25.0,<3.0.0,>=2.14.1->google-cloud-vision) (0.4.2)\nRequirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.11/dist-packages (from google-auth!=2.24.0,!=2.25.0,<3.0.0,>=2.14.1->google-cloud-vision) (4.9.1)\nRequirement already satisfied: pyasn1<0.7.0,>=0.6.1 in /usr/local/lib/python3.11/dist-packages (from pyasn1-modules>=0.2.1->google-auth!=2.24.0,!=2.25.0,<3.0.0,>=2.14.1->google-cloud-vision) (0.6.1)\nRequirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0,>=1.34.1->google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0,>=1.34.1->google-cloud-vision) (3.4.2)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0,>=1.34.1->google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0,>=1.34.1->google-cloud-vision) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0,>=1.34.1->google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0,>=1.34.1->google-cloud-vision) (2.5.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0dev,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0,>=1.34.1->google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0,>=1.34.1->google-cloud-vision) (2025.6.15)\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"import os\nimport re\nimport json\nimport pandas as pd\nfrom collections import OrderedDict\nfrom google.cloud import vision\nimport io","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-16T08:06:55.958949Z","iopub.execute_input":"2025-09-16T08:06:55.959299Z","iopub.status.idle":"2025-09-16T08:06:55.966400Z","shell.execute_reply.started":"2025-09-16T08:06:55.959269Z","shell.execute_reply":"2025-09-16T08:06:55.964938Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"# ========== 1. Set GOOGLE_APPLICATION_CREDENTIALS ==========\n# Upload your service account JSON and update this path.\nos.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = \"/kaggle/input/cloud-api-key/dynamic-amulet-472218-p5-503248315567.json\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-16T08:06:55.967668Z","iopub.execute_input":"2025-09-16T08:06:55.967970Z","iopub.status.idle":"2025-09-16T08:06:55.990677Z","shell.execute_reply.started":"2025-09-16T08:06:55.967944Z","shell.execute_reply":"2025-09-16T08:06:55.989146Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"# ========== 2. OCR Extraction with Google Cloud Vision ==========\ndef extract_text_from_images_gcp(image_paths):\n    client = vision.ImageAnnotatorClient()\n    all_texts = []\n    for img_path in image_paths:\n        with io.open(img_path, 'rb') as image_file:\n            content = image_file.read()\n        image = vision.Image(content=content)\n        response = client.document_text_detection(image=image)\n        text = response.full_text_annotation.text\n        text = re.sub(r\"[^\\x00-\\x7F]+\", \" \", text)\n        all_texts.append(text)\n    return \"\\n\".join(all_texts)\n\n# ========== 3. Normalization helper ==========\ndef normalize_text(val):\n    if not val or not isinstance(val, str):\n        return None\n    val = val.strip()\n    replacements = {\n        \"ONS\": \"0.15\",\n        \"O.3 \": \"0.3\",\n        \"hectaie\": \"hectare\",\n        \"HectaRes\": \"hectare\",\n        \"CULTINAT ION\": \"Cultivation\",\n        \"CULTIVATIoN\": \"Cultivation\",\n        \"Ycs/No\": \"No\",\n        \"Copy 0 F\": \"Copy of\",\n        \"  \": \" \"\n    }\n    for wrong, correct in replacements.items():\n        val = val.replace(wrong, correct)\n    val = re.sub(r\"(\\d),(\\d)\", r\"\\1.\\2\", val)\n    val = re.sub(r\"(\\d)\\s*\\.\\s*(\\d)\", r\"\\1.\\2\", val)\n    return val\n\n# ========== 4. Improved Field Extraction (Handles Coordinates) ==========\ndef parse_fields(text):\n    fields = {}\n\n    # Claimant name\n    match_name = re.search(r\"Name of the claimant.*?:\\s*([A-Za-z .'\\\"]+)\", text, re.IGNORECASE)\n    if match_name:\n        fields[\"claimant_name\"] = match_name.group(1).strip()\n    # Spouse\n    match_spouse = re.search(r\"Name of the spouse.*?:\\s*([A-Za-z .'\\\"]+)\", text, re.IGNORECASE)\n    if match_spouse:\n        fields[\"spouse\"] = match_spouse.group(1).strip()\n    # Father/Mother\n    match_fm = re.search(r\"Name of[ /]*father[ /]*mother.*?:\\s*([A-Za-z .'/]+)\", text, re.IGNORECASE)\n    if match_fm:\n        fields[\"father_mother\"] = match_fm.group(1).strip()\n    # Khesra\n    match_khesra = re.search(r\"Khesra Number[:\\s]*([\\w/ -]+)\", text, re.IGNORECASE)\n    if match_khesra:\n        fields[\"khesra\"] = match_khesra.group(1).strip()\n    # Address\n    match_address = re.search(r\"Address[:\\s]*([A-Za-z0-9, .\\-]+)\", text, re.IGNORECASE)\n    if match_address:\n        fields[\"address\"] = match_address.group(1).strip()\n    # Village\n    match_village = re.search(r\"Village[:\\s]*([A-Za-z0-9, .\\-]+)\", text, re.IGNORECASE)\n    if match_village:\n        fields[\"village\"] = match_village.group(1).strip()\n    # Gram Panchayat\n    match_gp = re.search(r\"Gram Panchayat[:\\s]*([A-Za-z0-9, .\\-]+)\", text, re.IGNORECASE)\n    if match_gp:\n        fields[\"gram_panchayat\"] = match_gp.group(1).strip()\n    # Tehsil/Taluka\n    match_tehsil = re.search(r\"Tehsil[ /]*Taluka[:\\s]*([A-Za-z0-9, .\\-]+)\", text, re.IGNORECASE)\n    if match_tehsil:\n        fields[\"tehsil\"] = match_tehsil.group(1).strip()\n    # Phone number\n    match_phone = re.search(r\"Phone Number[:\\s]*([\\d ]+)\", text, re.IGNORECASE)\n    if match_phone:\n        fields[\"contact_phone\"] = match_phone.group(1).strip()\n    # District\n    match_dist = re.search(r\"District[:\\s]*([A-Za-z0-9, .\\-]+)\", text, re.IGNORECASE)\n    if match_dist:\n        fields[\"district\"] = match_dist.group(1).strip()\n    # Coordinates (new!)\n    match_coords = re.search(r\"Coordinates[:\\s]*([0-9\\.\\-, ]+)\", text, re.IGNORECASE)\n    if match_coords:\n        fields[\"land_coordinates\"] = match_coords.group(1).strip()\n    # Scheduled Tribe/Traditional Dweller\n    sched_match = re.search(r\"Scheduled Tribe[:\\s]*(Yes|No)\", text, re.IGNORECASE)\n    if sched_match:\n        fields[\"scheduled_tribe\"] = sched_match.group(1)\n    trad_match = re.search(r\"Other Traditional Forest Dweller[:\\s]*(Yes|No)\", text, re.IGNORECASE)\n    if trad_match:\n        fields[\"traditional_dweller\"] = trad_match.group(1)\n    # Family members\n    fam_match = re.search(r\"family with age: ([^\\n]+)\", text, re.IGNORECASE)\n    if fam_match:\n        fields[\"family_members\"] = fam_match.group(1).strip()\n    # Extent of forest land occupied (habitation)\n    match_hab = re.search(r\"for habitation\\s*([0-9\\. ]+\\w+)\", text, re.IGNORECASE)\n    if match_hab:\n        fields[\"extent_habitation\"] = match_hab.group(1).strip()\n    # Self-cultivation\n    match_selfcult = re.search(r\"for self-cultivation, if any:? ([0-9\\. ]+\\w+)\", text, re.IGNORECASE)\n    if match_selfcult:\n        fields[\"extent_self_cultivation\"] = match_selfcult.group(1).strip()\n    # Disputed lands\n    match_disp = re.search(r\"disputed lands if any:? ([A-Za-z0-9, .\\-]+)\", text, re.IGNORECASE)\n    if match_disp:\n        fields[\"disputed_lands\"] = match_disp.group(1).strip()\n    # Pattas/grants\n    match_pattas = re.search(r\"Pattas/leases/grants, if any:? ([A-Za-z0-9, .\\-\\/]+)\", text, re.IGNORECASE)\n    if match_pattas:\n        fields[\"pattas\"] = match_pattas.group(1).strip()\n    # Land for in situ rehabilitation\n    match_rehab = re.search(r\"in situ rehabilitation.*?if any:? (NOT APPLICABLE|[A-Za-z0-9, .\\-]+)\", text, re.IGNORECASE)\n    if match_rehab:\n        fields[\"rehabilitation_land\"] = match_rehab.group(1).strip()\n    # Displaced land\n    match_disp_land = re.search(r\"displaced without land compensation: ([^\\n]+)\", text, re.IGNORECASE)\n    if match_disp_land:\n        fields[\"displaced_land\"] = match_disp_land.group(1).strip()\n    # Forest village extent\n    match_forest_extent = re.search(r\"Extent of land in forest villages.*?if any[:\\s]*([0-9\\. ]+\\w+)\", text, re.IGNORECASE)\n    if match_forest_extent:\n        fields[\"forest_village_extent\"] = match_forest_extent.group(1).strip()\n    # Traditional rights\n    match_tr_rights = re.search(r\"other traditional right.*?if any[:\\s]*([^\\n]+)\", text, re.IGNORECASE)\n    if match_tr_rights:\n        fields[\"traditional_rights\"] = match_tr_rights.group(1).strip()\n    # Evidence/multiline\n    match_evidence = re.search(r\"Evidence in.*?support.*?(?:See Rule [0-9]+)?[:\\s]*(.+?)(?:\\n\\d+[\\.)]|\\Z)\", text, re.IGNORECASE|re.DOTALL)\n    if match_evidence:\n        fields[\"evidence\"] = match_evidence.group(1).strip().replace('\\n','; ')\n    # Other info\n    match_other = re.search(r\"other information[:\\s]*([^\\n]+)\", text, re.IGNORECASE)\n    if match_other:\n        fields[\"other_info\"] = match_other.group(1).strip()\n    # Remove noise/normalize\n    for k in fields:\n        fields[k] = normalize_text(fields[k])\n    return fields\n\n# ========== 5. Scheme Recommendation ==========\ndef recommend_schemes(parsed_fields):\n    schemes = []\n    if parsed_fields.get(\"scheduled_tribe\") == \"Yes\":\n        schemes.append(\"Digital FRA Title Issuance: Land rights formalization (ST)\")\n    if parsed_fields.get(\"extent_habitation\") or parsed_fields.get(\"extent_self_cultivation\"):\n        schemes.append(\"PM Kisan Samman Nidhi: Direct income support for farmers\")\n        schemes.append(\"PM Fasal Bima Yojana: Crop insurance and disaster relief\")\n    if parsed_fields.get(\"address\") and \"water\" in parsed_fields.get(\"address\").lower():\n        schemes.append(\"Jal Jeevan Mission: Household tap water\")\n        schemes.append(\"Construction of water storage tanks\")\n    if parsed_fields.get(\"pattas\"):\n        schemes.append(\"Land Rights Digitization Support\")\n    schemes.append(\"MGNREGA: Rural asset creation & jobs\")\n    return schemes\n\n# ========== 6. Payload Builder ==========\ndef build_payload(parsed_fields, raw_text, doc_paths):\n    payload = OrderedDict({\n        \"claimant_name\": parsed_fields.get(\"claimant_name\"),\n        \"spouse\": parsed_fields.get(\"spouse\"),\n        \"father_mother\": parsed_fields.get(\"father_mother\"),\n        \"village\": parsed_fields.get(\"village\"),\n        \"land_area\": parsed_fields.get(\"extent_habitation\"),\n        \"self_cultivation\": parsed_fields.get(\"extent_self_cultivation\"),\n        \"land_coordinates\": parsed_fields.get(\"land_coordinates\"),\n        \"khesra_number\": parsed_fields.get(\"khesra\"),\n        \"contact_phone\": parsed_fields.get(\"contact_phone\"),\n        \"document_path\": \",\".join(doc_paths),\n        \"raw_text\": raw_text,\n        \"status\": \"Waiting\",\n        \"suggested_schemes\": recommend_schemes(parsed_fields),\n        \"disputed_lands\": parsed_fields.get(\"disputed_lands\"),\n        \"pattas_leases_grants\": parsed_fields.get(\"pattas\"),\n        \"rehabilitation_land\": parsed_fields.get(\"rehabilitation_land\"),\n        \"displaced_land\": parsed_fields.get(\"displaced_land\"),\n        \"forest_village_extent\": parsed_fields.get(\"forest_village_extent\"),\n        \"traditional_rights\": parsed_fields.get(\"traditional_rights\"),\n        \"evidence\": parsed_fields.get(\"evidence\"),\n        \"other_info\": parsed_fields.get(\"other_info\")\n    })\n    return payload","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-16T08:06:55.992509Z","iopub.execute_input":"2025-09-16T08:06:55.993000Z","iopub.status.idle":"2025-09-16T08:06:56.027127Z","shell.execute_reply.started":"2025-09-16T08:06:55.992970Z","shell.execute_reply":"2025-09-16T08:06:56.025620Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"# ========== 7. Main Pipeline ==========\nif __name__ == \"__main__\":\n    # ====== Update these file paths ======\n    doc_paths = [\n        \"/kaggle/input/fra-sample-dataset/WhatsApp-Image-2025-09-16-at-12.26.03-AM.jpg\",\n        \"/kaggle/input/fra-sample-dataset/WhatsApp-Image-2025-09-16-at-12.26.02-AM.jpg\"\n    ]\n    # Step 1: OCR extraction\n    import os\n    # List all image files from directory\n    img_dir = \"/kaggle/input/fra-sample-dataset\"\n    doc_paths = [\n        os.path.join(img_dir, fname)\n        for fname in os.listdir(img_dir)\n        if fname.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ]\n    raw_text = extract_text_from_images_gcp(doc_paths)\n    \n    # Step 2: Field parsing\n    parsed_fields = parse_fields(raw_text)\n    # Step 3: Structuring as payload\n    payload = build_payload(parsed_fields, raw_text, doc_paths)\n    # Step 4: Save as CSV and JSON\n    pd.DataFrame([payload]).to_csv(\"fra_parsed_results.csv\", index=False)\n    with open(\"fra_parsed_results.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(payload, f, ensure_ascii=False, indent=2)\n    print(\"✅ Saved cleaned payload to CSV and JSON\")\n    print(json.dumps(payload, indent=2))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-16T08:06:56.030294Z","iopub.execute_input":"2025-09-16T08:06:56.030780Z","iopub.status.idle":"2025-09-16T08:06:57.493624Z","shell.execute_reply.started":"2025-09-16T08:06:56.030750Z","shell.execute_reply":"2025-09-16T08:06:57.492548Z"}},"outputs":[{"name":"stdout","text":"✅ Saved cleaned payload to CSV and JSON\n{\n  \"claimant_name\": \"RAM PRASAD\",\n  \"spouse\": null,\n  \"father_mother\": null,\n  \"village\": \"ROAD, NEAR WATER\",\n  \"land_area\": \"0.15 hectare\",\n  \"self_cultivation\": \"1.2 HECTARES\",\n  \"land_coordinates\": \"76.54, 23.45\",\n  \"khesra_number\": \"K401\",\n  \"contact_phone\": \"9876543210\",\n  \"document_path\": \"/kaggle/input/fra-sample-dataset/WhatsApp Image 2025-09-16 at 12.26.03 AM.jpeg,/kaggle/input/fra-sample-dataset/WhatsApp Image 2025-09-16 at 12.26.02 AM.jpeg\",\n  \"raw_text\": \"Annexures\\nAnnexure I\\n(See Rule 6(1)\\nFORM-A\\nCLAIM FORM FOR RIGHTS TO FOREST LAND\\n[See Rule 11(1)(a)]\\n1. Name of the claimant (s): RAM PRASAD\\n2. Name of the spouse SITA DEVI\\n3. Name of father/mother SHYAM PRASAD/MEERA DEVI\\n4. Khesra Number: K401\\n5. Area:\\n6. Address: HOUSE NO.12. FOREST VILLAGE ROAD, NEAR WATER\\n7. Village: JANGAL PUR\\n8. Gram Panchayat: GREENFIELD PANCHAYATT\\n9. Tehsil/Taluka:\\nVANAPUR\\n10. Phone Number: 9876543210\\n11. District: ARUNACHAL\\n12. Coordinates: 76.54, 23.45\\n13. (a) Scheduled Tribe: Yes/No (Attach authenticated copy of Certificate) YES\\n(b) Other Traditional Forest Dweller: Yes/No NO\\n(If a spouse is a Scheduled Tribe (attach authenticated copy of certificate)\\n14. Name of other members in the family with age: RAHUL PRASAD, 14\\n(including children and adult dependents)\\nNature of claim on land:\\n1. Extent of forest land occupied\\n(a) for habitation\\n0.15 hectare\\n(b) for self-cultivation, if any: 1.2 HECTARES\\n(See Section 3(1) (a) of the Act)\\n2. disputed lands if any: NONE\\n(See Section 3(1)(f) of the Act)\\nTANK\\n3. Pattas/leases/grants, if any: OLD CULTIVATION PATTA, NO. 215/1997\\n(See Section 3(1)(g) of the Act)\\n4. Land for in situ rehabilitation or alternative land, if any: NOT APPLICABLE\\n(See Section 3(1)(m) of the Act)\\n5. Land from where displaced without land compensation: 0.5 HECTARE, DISPLACED\\n(See Section 4(8) of the Act)\\n6. Extent of land in forest villages, if\\nany: (See Section 3(1)(h) of the\\nAct)\\n0.3 HECTARE\\n7. Any other traditional right, if\\nany: (See Section 3(1)(1) of\\nthe Act)\\n8. Evidence in\\nDURING DAM CONSTRUCTION, 2002\\nRIGHTS TO COLLECT MINOR FOREST PRODUCE\\nsupport: (See\\nRule 13)\\nCOPY OF ST CERTIFICATE\\nAFFIDAVIT OF CULTIVATION\\nPANCHAYAT VERIFICATION\\n9. Any other information: FAMILY RESIDING IN FOREST AREA FOR\\nMORE THAN 75 YEARS\\nSignature/Thumb Impression of the Claimant(s):\\nThe Scheduled Tribes and Other Traditional Forest Dwellers\\n(Recognition of Forest Rights) Rules, 2007\\nMinistry of Tribal Affairs\\nGovernment of India\",\n  \"status\": \"Waiting\",\n  \"suggested_schemes\": [\n    \"Digital FRA Title Issuance: Land rights formalization (ST)\",\n    \"PM Kisan Samman Nidhi: Direct income support for farmers\",\n    \"PM Fasal Bima Yojana: Crop insurance and disaster relief\",\n    \"Jal Jeevan Mission: Household tap water\",\n    \"Construction of water storage tanks\",\n    \"Land Rights Digitization Support\",\n    \"MGNREGA: Rural asset creation & jobs\"\n  ],\n  \"disputed_lands\": \"NONE\",\n  \"pattas_leases_grants\": \"OLD CULTIVATION PATTA, NO. 215/1997\",\n  \"rehabilitation_land\": \"NOT APPLICABLE\",\n  \"displaced_land\": \"0.5 HECTARE, DISPLACED\",\n  \"forest_village_extent\": null,\n  \"traditional_rights\": null,\n  \"evidence\": \"(See; Rule 13); COPY OF ST CERTIFICATE; AFFIDAVIT OF CULTIVATION; PANCHAYAT VERIFICATION\",\n  \"other_info\": \"FAMILY RESIDING IN FOREST AREA FOR\"\n}\n","output_type":"stream"}],"execution_count":10}]}